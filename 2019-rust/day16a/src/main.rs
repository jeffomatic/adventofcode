fn fft_phase(digits: &Vec<i64>) -> Vec<i64> {
    let seq = [0, 1, 0, -1];

    let mut res = Vec::with_capacity(digits.len());
    for i in 0..digits.len() {
        let seq_width = seq.len() * (i + 1);
        let mut v = 0;
        let mut seq_n = 0;
        for d in digits.iter() {
            seq_n += 1;
            let mul = seq[(seq_n % seq_width) / (i + 1)];
            v += mul * d;
        }
        res.push(v.abs() % 10);
    }

    res
}

fn main() {
    let input = "59791911701697178620772166487621926539855976237879300869872931303532122404711706813176657053802481833015214226705058704017099411284046473395211022546662450403964137283487707691563442026697656820695854453826690487611172860358286255850668069507687936410599520475680695180527327076479119764897119494161366645257480353063266653306023935874821274026377407051958316291995144593624792755553923648392169597897222058613725620920233283869036501950753970029182181770358827133737490530431859833065926816798051237510954742209939957376506364926219879150524606056996572743773912030397695613203835011524677640044237824961662635530619875905369208905866913334027160178";
    let mut digits: Vec<i64> = input
        .chars()
        .map(|c| c.to_digit(10).unwrap() as i64)
        .collect();

    for _ in 0..100 {
        digits = fft_phase(&digits);
    }

    println!(
        "{}",
        &digits[0..=7]
            .iter()
            .map(|d| d.to_string())
            .collect::<Vec<_>>()
            .join("")
    );
}
