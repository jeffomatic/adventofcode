<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>day23b`DYLD-STUB$$free (29 samples, 0.15%)</title><rect x="0.0000%" y="181" width="0.1464%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="191.50"></text></g><g><title>day23b`DYLD-STUB$$malloc (15 samples, 0.08%)</title><rect x="0.1464%" y="181" width="0.0757%" height="15" fill="rgb(217,0,24)"/><text x="0.3964%" y="191.50"></text></g><g><title>day23b`DYLD-STUB$$memcpy (4 samples, 0.02%)</title><rect x="0.2221%" y="181" width="0.0202%" height="15" fill="rgb(221,193,54)"/><text x="0.4721%" y="191.50"></text></g><g><title>day23b`__rdl_alloc (10 samples, 0.05%)</title><rect x="0.2423%" y="181" width="0.0505%" height="15" fill="rgb(248,212,6)"/><text x="0.4923%" y="191.50"></text></g><g><title>day23b`__rdl_dealloc (6 samples, 0.03%)</title><rect x="0.2927%" y="181" width="0.0303%" height="15" fill="rgb(208,68,35)"/><text x="0.5427%" y="191.50"></text></g><g><title>day23b`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (1,012 samples, 5.11%)</title><rect x="0.3281%" y="181" width="5.1075%" height="15" fill="rgb(232,128,0)"/><text x="0.5781%" y="191.50">day23b..</text></g><g><title>day23b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.03%)</title><rect x="5.4356%" y="181" width="0.0252%" height="15" fill="rgb(207,160,47)"/><text x="5.6856%" y="191.50"></text></g><g><title>day23b`day23b::Type::homeroom_positions (14 samples, 0.07%)</title><rect x="5.4608%" y="181" width="0.0707%" height="15" fill="rgb(228,23,34)"/><text x="5.7108%" y="191.50"></text></g><g><title>day23b`day23b::has_path (68 samples, 0.34%)</title><rect x="5.5314%" y="181" width="0.3432%" height="15" fill="rgb(218,30,26)"/><text x="5.7814%" y="191.50"></text></g><g><title>day23b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (649 samples, 3.28%)</title><rect x="11.5322%" y="165" width="3.2755%" height="15" fill="rgb(220,122,19)"/><text x="11.7822%" y="175.50">day..</text></g><g><title>day23b`DYLD-STUB$$malloc (12 samples, 0.06%)</title><rect x="14.8077%" y="165" width="0.0606%" height="15" fill="rgb(250,228,42)"/><text x="15.0577%" y="175.50"></text></g><g><title>day23b`__rdl_alloc (12 samples, 0.06%)</title><rect x="14.8683%" y="165" width="0.0606%" height="15" fill="rgb(240,193,28)"/><text x="15.1183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="15.1156%" y="101" width="0.0101%" height="15" fill="rgb(216,20,37)"/><text x="15.3656%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.08%)</title><rect x="15.2115%" y="85" width="0.0757%" height="15" fill="rgb(206,188,39)"/><text x="15.4615%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (46 samples, 0.23%)</title><rect x="15.1004%" y="117" width="0.2322%" height="15" fill="rgb(217,207,13)"/><text x="15.3504%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (41 samples, 0.21%)</title><rect x="15.1257%" y="101" width="0.2069%" height="15" fill="rgb(231,73,38)"/><text x="15.3757%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.05%)</title><rect x="15.2872%" y="85" width="0.0454%" height="15" fill="rgb(225,20,46)"/><text x="15.5372%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (59 samples, 0.30%)</title><rect x="15.0500%" y="133" width="0.2978%" height="15" fill="rgb(210,31,41)"/><text x="15.3000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="15.3326%" y="117" width="0.0151%" height="15" fill="rgb(221,200,47)"/><text x="15.5826%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="15.3477%" y="133" width="0.0101%" height="15" fill="rgb(226,26,5)"/><text x="15.5977%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (2 samples, 0.01%)</title><rect x="15.3982%" y="101" width="0.0101%" height="15" fill="rgb(249,33,26)"/><text x="15.6482%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.06%)</title><rect x="15.4739%" y="85" width="0.0606%" height="15" fill="rgb(235,183,28)"/><text x="15.7239%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.02%)</title><rect x="15.5143%" y="69" width="0.0202%" height="15" fill="rgb(221,5,38)"/><text x="15.7643%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="15.5193%" y="53" width="0.0151%" height="15" fill="rgb(247,18,42)"/><text x="15.7693%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (3 samples, 0.02%)</title><rect x="15.5345%" y="85" width="0.0151%" height="15" fill="rgb(241,131,45)"/><text x="15.7845%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.04%)</title><rect x="15.6152%" y="53" width="0.0353%" height="15" fill="rgb(249,31,29)"/><text x="15.8652%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (55 samples, 0.28%)</title><rect x="15.5496%" y="85" width="0.2776%" height="15" fill="rgb(225,111,53)"/><text x="15.7996%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.26%)</title><rect x="15.5648%" y="69" width="0.2624%" height="15" fill="rgb(238,160,17)"/><text x="15.8148%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (35 samples, 0.18%)</title><rect x="15.6506%" y="53" width="0.1766%" height="15" fill="rgb(214,148,48)"/><text x="15.9006%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.06%)</title><rect x="15.7666%" y="37" width="0.0606%" height="15" fill="rgb(232,36,49)"/><text x="16.0166%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.07%)</title><rect x="15.8272%" y="85" width="0.0707%" height="15" fill="rgb(209,103,24)"/><text x="16.0772%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.07%)</title><rect x="15.8322%" y="69" width="0.0656%" height="15" fill="rgb(229,88,8)"/><text x="16.0822%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (111 samples, 0.56%)</title><rect x="15.4133%" y="101" width="0.5602%" height="15" fill="rgb(213,181,19)"/><text x="15.6633%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (14 samples, 0.07%)</title><rect x="15.9029%" y="85" width="0.0707%" height="15" fill="rgb(254,191,54)"/><text x="16.1529%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.01%)</title><rect x="15.9736%" y="101" width="0.0101%" height="15" fill="rgb(241,83,37)"/><text x="16.2236%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (124 samples, 0.63%)</title><rect x="15.3780%" y="117" width="0.6258%" height="15" fill="rgb(233,36,39)"/><text x="15.6280%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="15.9836%" y="101" width="0.0202%" height="15" fill="rgb(226,3,54)"/><text x="16.2336%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.04%)</title><rect x="16.0038%" y="117" width="0.0404%" height="15" fill="rgb(245,192,40)"/><text x="16.2538%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (147 samples, 0.74%)</title><rect x="15.3629%" y="133" width="0.7419%" height="15" fill="rgb(238,167,29)"/><text x="15.6129%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.06%)</title><rect x="16.0442%" y="117" width="0.0606%" height="15" fill="rgb(232,182,51)"/><text x="16.2942%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.05%)</title><rect x="16.0543%" y="101" width="0.0505%" height="15" fill="rgb(231,60,39)"/><text x="16.3043%" y="111.50"></text></g><g><title>day23b`alloc::raw_vec::finish_grow (216 samples, 1.09%)</title><rect x="15.0197%" y="149" width="1.0901%" height="15" fill="rgb(208,69,12)"/><text x="15.2697%" y="159.50"></text></g><g><title>day23b`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (235 samples, 1.19%)</title><rect x="14.9339%" y="165" width="1.1860%" height="15" fill="rgb(235,93,37)"/><text x="15.1839%" y="175.50"></text></g><g><title>day23b`alloc::raw_vec::finish_grow (7 samples, 0.04%)</title><rect x="16.1199%" y="165" width="0.0353%" height="15" fill="rgb(213,116,39)"/><text x="16.3699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.05%)</title><rect x="17.4170%" y="117" width="0.0505%" height="15" fill="rgb(222,207,29)"/><text x="17.6670%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (253 samples, 1.28%)</title><rect x="17.2807%" y="133" width="1.2769%" height="15" fill="rgb(206,96,30)"/><text x="17.5307%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (216 samples, 1.09%)</title><rect x="17.4674%" y="117" width="1.0901%" height="15" fill="rgb(218,138,4)"/><text x="17.7174%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (51 samples, 0.26%)</title><rect x="18.3002%" y="101" width="0.2574%" height="15" fill="rgb(250,191,14)"/><text x="18.5502%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (349 samples, 1.76%)</title><rect x="16.8921%" y="149" width="1.7614%" height="15" fill="rgb(239,60,40)"/><text x="17.1421%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.10%)</title><rect x="18.5576%" y="133" width="0.0959%" height="15" fill="rgb(206,27,48)"/><text x="18.8076%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.10%)</title><rect x="18.6535%" y="149" width="0.0959%" height="15" fill="rgb(225,35,8)"/><text x="18.9035%" y="159.50"></text></g><g><title>day23b`day23b::Type::homeroom_positions (520 samples, 2.62%)</title><rect x="16.1552%" y="165" width="2.6244%" height="15" fill="rgb(250,213,24)"/><text x="16.4052%" y="175.50">da..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="18.7544%" y="149" width="0.0252%" height="15" fill="rgb(247,123,22)"/><text x="19.0044%" y="159.50"></text></g><g><title>day23b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,179 samples, 5.95%)</title><rect x="31.8411%" y="133" width="5.9503%" height="15" fill="rgb(231,138,38)"/><text x="32.0911%" y="143.50">day23b`&lt;..</text></g><g><title>day23b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,548 samples, 17.91%)</title><rect x="23.3370%" y="149" width="17.9065%" height="15" fill="rgb(231,145,46)"/><text x="23.5870%" y="159.50">day23b`hashbrown::map::HashM..</text></g><g><title>day23b`hashbrown::map::make_hash (684 samples, 3.45%)</title><rect x="37.7915%" y="133" width="3.4521%" height="15" fill="rgb(251,118,11)"/><text x="38.0415%" y="143.50">day..</text></g><g><title>day23b`day23b::has_path (4,967 samples, 25.07%)</title><rect x="18.7797%" y="165" width="25.0681%" height="15" fill="rgb(217,147,25)"/><text x="19.0297%" y="175.50">day23b`day23b::has_path</text></g><g><title>day23b`hashbrown::map::make_hash (516 samples, 2.60%)</title><rect x="41.2436%" y="149" width="2.6042%" height="15" fill="rgb(247,81,37)"/><text x="41.4936%" y="159.50">da..</text></g><g><title>day23b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (188 samples, 0.95%)</title><rect x="43.8478%" y="165" width="0.9488%" height="15" fill="rgb(209,12,38)"/><text x="44.0978%" y="175.50"></text></g><g><title>day23b`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="47.4563%" y="133" width="0.0151%" height="15" fill="rgb(227,1,9)"/><text x="47.7063%" y="143.50"></text></g><g><title>day23b`DYLD-STUB$$malloc (6 samples, 0.03%)</title><rect x="47.4715%" y="133" width="0.0303%" height="15" fill="rgb(248,47,43)"/><text x="47.7215%" y="143.50"></text></g><g><title>day23b`__rdl_alloc (13 samples, 0.07%)</title><rect x="47.5018%" y="133" width="0.0656%" height="15" fill="rgb(221,10,30)"/><text x="47.7518%" y="143.50"></text></g><g><title>day23b`hashbrown::map::make_hash (107 samples, 0.54%)</title><rect x="47.5674%" y="133" width="0.5400%" height="15" fill="rgb(210,229,1)"/><text x="47.8174%" y="143.50"></text></g><g><title>day23b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (647 samples, 3.27%)</title><rect x="49.5660%" y="117" width="3.2654%" height="15" fill="rgb(222,148,37)"/><text x="49.8160%" y="127.50">day..</text></g><g><title>day23b`hashbrown::map::make_hash (184 samples, 0.93%)</title><rect x="52.8313%" y="117" width="0.9286%" height="15" fill="rgb(234,67,33)"/><text x="53.0813%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="53.7600%" y="117" width="0.0101%" height="15" fill="rgb(247,98,35)"/><text x="54.0100%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (31 samples, 0.16%)</title><rect x="54.0577%" y="85" width="0.1565%" height="15" fill="rgb(247,138,52)"/><text x="54.3077%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (37 samples, 0.19%)</title><rect x="54.7492%" y="69" width="0.1867%" height="15" fill="rgb(213,79,30)"/><text x="54.9992%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (519 samples, 2.62%)</title><rect x="53.9518%" y="101" width="2.6194%" height="15" fill="rgb(246,177,23)"/><text x="54.2018%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (467 samples, 2.36%)</title><rect x="54.2142%" y="85" width="2.3569%" height="15" fill="rgb(230,62,27)"/><text x="54.4642%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (324 samples, 1.64%)</title><rect x="54.9359%" y="69" width="1.6352%" height="15" fill="rgb(216,154,8)"/><text x="55.1859%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (43 samples, 0.22%)</title><rect x="56.3541%" y="53" width="0.2170%" height="15" fill="rgb(244,35,45)"/><text x="56.6041%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (564 samples, 2.85%)</title><rect x="53.7701%" y="117" width="2.8465%" height="15" fill="rgb(251,115,12)"/><text x="54.0201%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.05%)</title><rect x="56.5711%" y="101" width="0.0454%" height="15" fill="rgb(240,54,50)"/><text x="56.8211%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.04%)</title><rect x="56.6165%" y="117" width="0.0353%" height="15" fill="rgb(233,84,52)"/><text x="56.8665%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (67 samples, 0.34%)</title><rect x="56.6519%" y="117" width="0.3381%" height="15" fill="rgb(207,117,47)"/><text x="56.9019%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 0.19%)</title><rect x="56.8033%" y="101" width="0.1867%" height="15" fill="rgb(249,43,39)"/><text x="57.0533%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.18%)</title><rect x="56.8134%" y="85" width="0.1766%" height="15" fill="rgb(209,38,44)"/><text x="57.0634%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (95 samples, 0.48%)</title><rect x="56.9900%" y="117" width="0.4795%" height="15" fill="rgb(236,212,23)"/><text x="57.2400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (78 samples, 0.39%)</title><rect x="57.0758%" y="101" width="0.3937%" height="15" fill="rgb(242,79,21)"/><text x="57.3258%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (51 samples, 0.26%)</title><rect x="57.2121%" y="85" width="0.2574%" height="15" fill="rgb(211,96,35)"/><text x="57.4621%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.02%)</title><rect x="57.4695%" y="117" width="0.0151%" height="15" fill="rgb(253,215,40)"/><text x="57.7195%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="57.4846%" y="117" width="0.0101%" height="15" fill="rgb(211,81,21)"/><text x="57.7346%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="57.4947%" y="117" width="0.0202%" height="15" fill="rgb(208,190,38)"/><text x="57.7447%" y="127.50"></text></g><g><title>day23b`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,866 samples, 9.42%)</title><rect x="48.1074%" y="133" width="9.4176%" height="15" fill="rgb(235,213,38)"/><text x="48.3574%" y="143.50">day23b`hashbr..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="57.5149%" y="117" width="0.0101%" height="15" fill="rgb(237,122,38)"/><text x="57.7649%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="57.5250%" y="133" width="0.0101%" height="15" fill="rgb(244,218,35)"/><text x="57.7750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="57.5351%" y="133" width="0.0151%" height="15" fill="rgb(240,68,47)"/><text x="57.7851%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.07%)</title><rect x="57.5502%" y="133" width="0.0656%" height="15" fill="rgb(210,16,53)"/><text x="57.8002%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="57.6158%" y="133" width="0.0151%" height="15" fill="rgb(235,124,12)"/><text x="57.8658%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (5 samples, 0.03%)</title><rect x="57.6310%" y="133" width="0.0252%" height="15" fill="rgb(224,169,11)"/><text x="57.8810%" y="143.50"></text></g><g><title>day23b`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,193 samples, 11.07%)</title><rect x="46.8507%" y="149" width="11.0679%" height="15" fill="rgb(250,166,2)"/><text x="47.1007%" y="159.50">day23b`hashbrown..</text></g><g><title>libsystem_platform.dylib`_platform_memset (52 samples, 0.26%)</title><rect x="57.6562%" y="133" width="0.2624%" height="15" fill="rgb(242,216,29)"/><text x="57.9062%" y="143.50"></text></g><g><title>day23b`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.05%)</title><rect x="57.9186%" y="149" width="0.0454%" height="15" fill="rgb(230,116,27)"/><text x="58.1686%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.03%)</title><rect x="57.9641%" y="149" width="0.0303%" height="15" fill="rgb(228,99,48)"/><text x="58.2141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="57.9792%" y="133" width="0.0151%" height="15" fill="rgb(253,11,6)"/><text x="58.2292%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="57.9843%" y="117" width="0.0101%" height="15" fill="rgb(247,143,39)"/><text x="58.2343%" y="127.50"></text></g><g><title>day23b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,617 samples, 13.21%)</title><rect x="44.7966%" y="165" width="13.2078%" height="15" fill="rgb(236,97,10)"/><text x="45.0466%" y="175.50">day23b`hashbrown::ma..</text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="57.9943%" y="149" width="0.0101%" height="15" fill="rgb(233,208,19)"/><text x="58.2443%" y="159.50"></text></g><g><title>day23b`hashbrown::map::make_hash (111 samples, 0.56%)</title><rect x="58.0044%" y="165" width="0.5602%" height="15" fill="rgb(216,164,2)"/><text x="58.2544%" y="175.50"></text></g><g><title>day23b`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.16%)</title><rect x="58.5647%" y="165" width="0.1565%" height="15" fill="rgb(220,129,5)"/><text x="58.8147%" y="175.50"></text></g><g><title>day23b`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,354 samples, 6.83%)</title><rect x="64.3283%" y="149" width="6.8336%" height="15" fill="rgb(242,17,10)"/><text x="64.5783%" y="159.50">day23b`&lt;s..</text></g><g><title>day23b`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,729 samples, 13.77%)</title><rect x="58.7211%" y="165" width="13.7731%" height="15" fill="rgb(242,107,0)"/><text x="58.9711%" y="175.50">day23b`std::collectio..</text></g><g><title>day23b`hashbrown::map::make_hash (264 samples, 1.33%)</title><rect x="71.1618%" y="149" width="1.3324%" height="15" fill="rgb(251,28,31)"/><text x="71.4118%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.06%)</title><rect x="73.8922%" y="133" width="0.0555%" height="15" fill="rgb(233,223,10)"/><text x="74.1422%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (76 samples, 0.38%)</title><rect x="75.7293%" y="117" width="0.3836%" height="15" fill="rgb(215,21,27)"/><text x="75.9793%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (822 samples, 4.15%)</title><rect x="73.1705%" y="149" width="4.1486%" height="15" fill="rgb(232,23,21)"/><text x="73.4205%" y="159.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (668 samples, 3.37%)</title><rect x="73.9477%" y="133" width="3.3714%" height="15" fill="rgb(244,5,23)"/><text x="74.1977%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (239 samples, 1.21%)</title><rect x="76.1128%" y="117" width="1.2062%" height="15" fill="rgb(226,81,46)"/><text x="76.3628%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (51 samples, 0.26%)</title><rect x="77.0617%" y="101" width="0.2574%" height="15" fill="rgb(247,70,30)"/><text x="77.3117%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,379 samples, 6.96%)</title><rect x="72.4992%" y="165" width="6.9597%" height="15" fill="rgb(212,68,19)"/><text x="72.7492%" y="175.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (424 samples, 2.14%)</title><rect x="77.3191%" y="149" width="2.1399%" height="15" fill="rgb(240,187,13)"/><text x="77.5691%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (23 samples, 0.12%)</title><rect x="79.4640%" y="165" width="0.1161%" height="15" fill="rgb(223,113,26)"/><text x="79.7140%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (541 samples, 2.73%)</title><rect x="82.8253%" y="149" width="2.7304%" height="15" fill="rgb(206,192,2)"/><text x="83.0753%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_size (479 samples, 2.42%)</title><rect x="83.1382%" y="133" width="2.4175%" height="15" fill="rgb(241,108,4)"/><text x="83.3882%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`free (1,188 samples, 6.00%)</title><rect x="79.5801%" y="165" width="5.9958%" height="15" fill="rgb(247,173,49)"/><text x="79.8301%" y="175.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.02%)</title><rect x="85.5557%" y="149" width="0.0202%" height="15" fill="rgb(224,114,35)"/><text x="85.8057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.02%)</title><rect x="90.0878%" y="133" width="0.0202%" height="15" fill="rgb(245,159,27)"/><text x="90.3378%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.02%)</title><rect x="90.0878%" y="117" width="0.0202%" height="15" fill="rgb(245,172,44)"/><text x="90.3378%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (60 samples, 0.30%)</title><rect x="90.1131%" y="133" width="0.3028%" height="15" fill="rgb(236,23,11)"/><text x="90.3631%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (22 samples, 0.11%)</title><rect x="90.3048%" y="117" width="0.1110%" height="15" fill="rgb(205,117,38)"/><text x="90.5548%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (638 samples, 3.22%)</title><rect x="90.4159%" y="133" width="3.2199%" height="15" fill="rgb(237,72,25)"/><text x="90.6659%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (269 samples, 1.36%)</title><rect x="93.6358%" y="133" width="1.3576%" height="15" fill="rgb(244,70,9)"/><text x="93.8858%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (53 samples, 0.27%)</title><rect x="94.9934%" y="133" width="0.2675%" height="15" fill="rgb(217,125,39)"/><text x="95.2434%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.03%)</title><rect x="95.2306%" y="117" width="0.0303%" height="15" fill="rgb(235,36,10)"/><text x="95.4806%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (45 samples, 0.23%)</title><rect x="95.2609%" y="133" width="0.2271%" height="15" fill="rgb(251,123,47)"/><text x="95.5109%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,612 samples, 8.14%)</title><rect x="87.5593%" y="149" width="8.1357%" height="15" fill="rgb(221,13,13)"/><text x="87.8093%" y="159.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (41 samples, 0.21%)</title><rect x="95.4880%" y="133" width="0.2069%" height="15" fill="rgb(238,131,9)"/><text x="95.7380%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (37 samples, 0.19%)</title><rect x="95.5082%" y="117" width="0.1867%" height="15" fill="rgb(211,50,8)"/><text x="95.7582%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,008 samples, 10.13%)</title><rect x="85.5759%" y="165" width="10.1342%" height="15" fill="rgb(245,182,24)"/><text x="85.8259%" y="175.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (3 samples, 0.02%)</title><rect x="95.6950%" y="149" width="0.0151%" height="15" fill="rgb(242,14,37)"/><text x="95.9450%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.03%)</title><rect x="95.7101%" y="165" width="0.0303%" height="15" fill="rgb(246,228,12)"/><text x="95.9601%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (113 samples, 0.57%)</title><rect x="95.7404%" y="165" width="0.5703%" height="15" fill="rgb(213,55,15)"/><text x="95.9904%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (2 samples, 0.01%)</title><rect x="96.3107%" y="165" width="0.0101%" height="15" fill="rgb(209,9,3)"/><text x="96.5607%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.08%)</title><rect x="96.3208%" y="165" width="0.0757%" height="15" fill="rgb(230,59,30)"/><text x="96.5708%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (88 samples, 0.44%)</title><rect x="96.3965%" y="165" width="0.4441%" height="15" fill="rgb(209,121,21)"/><text x="96.6465%" y="175.50"></text></g><g><title>day23b`day23b::main (18,055 samples, 91.12%)</title><rect x="5.8746%" y="181" width="91.1224%" height="15" fill="rgb(220,109,13)"/><text x="6.1246%" y="191.50">day23b`day23b::main</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.16%)</title><rect x="96.8406%" y="165" width="0.1565%" height="15" fill="rgb(232,18,1)"/><text x="97.0906%" y="175.50"></text></g><g><title>day23b`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 0.14%)</title><rect x="96.9971%" y="181" width="0.1363%" height="15" fill="rgb(215,41,42)"/><text x="97.2471%" y="191.50"></text></g><g><title>day23b`hashbrown::map::make_hash (56 samples, 0.28%)</title><rect x="97.1333%" y="181" width="0.2826%" height="15" fill="rgb(224,123,36)"/><text x="97.3833%" y="191.50"></text></g><g><title>day23b`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23 samples, 0.12%)</title><rect x="97.4210%" y="181" width="0.1161%" height="15" fill="rgb(240,125,3)"/><text x="97.6710%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.05%)</title><rect x="97.5371%" y="181" width="0.0505%" height="15" fill="rgb(205,98,50)"/><text x="97.7871%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.10%)</title><rect x="97.5876%" y="181" width="0.0959%" height="15" fill="rgb(205,185,37)"/><text x="97.8376%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (75 samples, 0.38%)</title><rect x="97.6835%" y="181" width="0.3785%" height="15" fill="rgb(238,207,15)"/><text x="97.9335%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (178 samples, 0.90%)</title><rect x="98.0620%" y="181" width="0.8984%" height="15" fill="rgb(213,199,42)"/><text x="98.3120%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 0.16%)</title><rect x="98.9603%" y="181" width="0.1615%" height="15" fill="rgb(235,201,11)"/><text x="99.2103%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.07%)</title><rect x="99.1218%" y="181" width="0.0656%" height="15" fill="rgb(207,46,11)"/><text x="99.3718%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (61 samples, 0.31%)</title><rect x="99.1874%" y="181" width="0.3079%" height="15" fill="rgb(241,35,35)"/><text x="99.4374%" y="191.50"></text></g><g><title>day23b`std::rt::lang_start::_{{closure}} (19,808 samples, 99.97%)</title><rect x="0.0000%" y="213" width="99.9697%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50">day23b`std::rt::lang_start::_{{closure}}</text></g><g><title>day23b`std::sys_common::backtrace::__rust_begin_short_backtrace (19,808 samples, 99.97%)</title><rect x="0.0000%" y="197" width="99.9697%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="207.50">day23b`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memmove (94 samples, 0.47%)</title><rect x="99.4953%" y="181" width="0.4744%" height="15" fill="rgb(219,102,11)"/><text x="99.7453%" y="191.50"></text></g><g><title>day23b`main (19,809 samples, 99.97%)</title><rect x="0.0000%" y="245" width="99.9748%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50">day23b`main</text></g><g><title>day23b`std::rt::lang_start_internal (19,809 samples, 99.97%)</title><rect x="0.0000%" y="229" width="99.9748%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50">day23b`std::rt::lang_start_internal</text></g><g><title>all (19,814 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="287.50"></text></g><g><title>libdyld.dylib`start (19,814 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="271.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.03%)</title><rect x="99.9748%" y="245" width="0.0252%" height="15" fill="rgb(217,163,10)"/><text x="100.2248%" y="255.50"></text></g></svg></svg>